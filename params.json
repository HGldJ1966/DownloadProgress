{"name":"DownloadProgressView","tagline":"","body":"# DownloadProgress\r\nAn android view showing a download progressBar, total size, downloadedSize, percentage downloaded and a cancel button of the android DownloadManager with just few lines of code. Just like Google Play downloading...\r\n\r\n# Version\r\n\r\n1.0.1\r\n\r\n\r\n# Usage\r\nTo use this library in your android project, just simply add the following repositories and dependency into your build.gradle\r\n\r\n```sh\r\nrepositories {\r\n    maven {\r\n        url 'https://dl.bintray.com/ayz4sci/maven/'\r\n    }\r\n}\r\n\r\ndependencies {\r\n    compile 'com.ayz4sci.androidfactory:downloadprogress:1.0.1'\r\n}\r\n```\r\n\r\nThen place `com.ayz4sci.androidfactory.DownloadProgressView` wherever you want the downloadprogressview to show, for example:\r\n\r\n```xml\r\n    <com.ayz4sci.androidfactory.DownloadProgressView\r\n    android:id=\"@+id/downloadProgressView\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:layout_marginBottom=\"10dp\"\r\n    android:layout_marginTop=\"10dp\"\r\n    android:orientation=\"horizontal\"\r\n    android:visibility=\"gone\" />\r\n```\r\n\r\nYou could get a DownloadProgressView instance through `findViewById` method.\r\n\r\n```java\r\nDownloadProgressView downloadProgressView = (DownloadProgressView) rootView.findViewById(R.id.downloadProgressView);\r\n```\r\nTo show the downloadprogressview, call `show` method and pass the downloadID that you got from DownloadManager when you started the download and also set `DownloadStatusListener` to know when download is successful, failed or cancelled eg.\r\n```java\r\nDownloadManager downloadManager = (DownloadManager) getSystemService(Context.DOWNLOAD_SERVICE);\r\nDownloadManager.Request request = new DownloadManager.Request(Uri.parse(\"YOUR_DOWNLOAD_URL\"));\r\nrequest.setTitle(\"TITLE\");\r\nrequest.setDescription(\"DESCRIPTION\");\r\nrequest.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);\r\nrequest.setDestinationInExternalFilesDir(getApplicationContext(), null, \"DOWNLOAD_FILE_NAME.mp4\");\r\nrequest.allowScanningByMediaScanner();\r\ndownloadID = downloadManager.enqueue(request);\r\n\r\ndownloadProgressView.show(downloadID, new DownloadProgressView.DownloadStatusListener() {\r\n  @Override\r\n  public void downloadFailed(int reason) {\r\n     //Action to perform when download fails, reason as returned by DownloadManager.COLUMN_REASON\r\n  }\r\n\r\n  @Override\r\n  public void downloadSuccessful() {\r\n    //Action to perform on success\r\n  }\r\n\r\n  @Override\r\n  public void downloadCancelled() {\r\n    //Action to perform when user press the cancel button\r\n  }\r\n});\r\n```\r\n\r\n\r\nThat's all. DownloadProgressView will handle the rest!\r\n\r\n# Change Logs\r\n\r\n### v1.0.1\r\n\r\nInitial version\r\n\r\n# License\r\n\r\nApache 2.0\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}